// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	mock "github.com/stretchr/testify/mock"

	rest "github.com/sendgrid/rest"
)

// SendGridClient is an autogenerated mock type for the SendGridClient type
type SendGridClient struct {
	mock.Mock
}

// Send provides a mock function with given fields: email
func (_m *SendGridClient) Send(email *mail.SGMailV3) (*rest.Response, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *rest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) (*rest.Response, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) *rest.Response); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*mail.SGMailV3) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSendGridClient creates a new instance of SendGridClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSendGridClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SendGridClient {
	mock := &SendGridClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
